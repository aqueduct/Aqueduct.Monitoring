<?xml version="1.0"?>

<project name="Common Utils" xmlns="http://nant.sf.net/release/0.85/nant.xsd">

  <!-- Requires all NAnt Contrib dlls to be copied with the core dlls -->

  <!-- Currently net-1.0, net-1.1, net-2.0, net-3.5, net-4.0, php, php-4, php-5, php-6, java, symfony, asp-3.0, design, cuyahoga, cuyahoga-no-solution, html -->
  <property name="project.type" value="${framework::get-target-framework()}" overwrite="false"/>
  
  <!-- Currently single, multi -->
  <property name="package.type" value="single" overwrite="false"/>
  
  <!-- Currently single, multi -->
  <property name="web.virtualdirectory" value="${package.name}" overwrite="false"/>

  <!-- Derive the working directory -->
  <property  name="working.path" value="C:\CruiseControl.NET\Projects\${package.name}" overwrite="false"/>
    <!-- full paths -->


  <!-- Location of output files, logs etc -->
  <!-- NOTE: build.path is deprecated -->
  <property if="${property::exists('build.path')}" name="artifact.path" value="${build.path}" overwrite="false"/>
  <if test="${not property::exists('build.path')}">
    <property if="${property::exists('CCNetArtifactDirectory')}" name="artifact.path" value="${CCNetArtifactDirectory}" overwrite="false"/>
    <property if="${not property::exists('CCNetArtifactDirectory')}" name="artifact.path" value="${basedir}/build" overwrite="false"/>
  </if>


  <!-- Standard source paths -->
  <property name="versions.path" value="${artifact.path}/versions" overwrite="false"/>
  <property name="current.path" value="${artifact.path}/current" overwrite="false"/>
  <property name="log.path" value="${artifact.path}/log" overwrite="false" />

  <!-- Labels for build variants -->
  <property name="development.label" value="development" overwrite="false"/>
  <property name="staging.label" value="staging" overwrite="false"/>
  <property name="live.label" value="live" overwrite="false"/>
  <property name="universal.label" value="universal" overwrite="false"/>

  <!-- Output paths for build variants -->
  <property name="development.path" value="${current.path}/${development.label}" overwrite="false"/>
  <property name="staging.path" value="${current.path}/${staging.label}" overwrite="false"/>
  <property name="live.path" value="${current.path}/${live.label}" overwrite="false"/>
  
  
  <property name="DeployEnvironment" value="${development.path}"/>
  
  <!-- Setup for version file -->
  <property name="create-version-file.destination.path" value="${current.path}"/>
  <property name="create-version-file.build.type" value="${universal.label}"/>

  <property name="msbuild.workingdir" value="${working.path}" overwrite="false"/>
  <property name="msbuild.configuration" value="Release" overwrite="false"/>
  <property name="ant.workingdir" value="${working.path}" overwrite="false"/>
  <property name="test.assembly" value="${package.name}.Test" overwrite="false"/>
  <property name="project.lib.path" value="${working.path}/lib" overwrite="false"/>


  <!-- Derive the root of source files -->
  <property if="${property::exists('src.path')}" name="code.source.path" value="${src.path}" overwrite="false"/>
  <property if="${not property::exists('code.source.path')}" name="code.source.path" value="${working.path}/src" overwrite="false"/>
  <property name="test.source.path" value="${code.source.path}/Test" overwrite="false"/>

  <property name="fxcop.config" value="${package.name}.FxCop" overwrite="false"/>

  <!-- Paths of helper applications -->
  <property name="fxcop.path" value="C:\Program Files\Microsoft FxCop 1.35" overwrite="false"/>
  <property name="msbuild.path" value="C:\WINDOWS\Microsoft.NET\Framework\v3.5" overwrite="false"/>
  <property name="nunit.path" value="C:\CruiseControl.NET\server\Tools\nUnit-2.5.5\bin" overwrite="false"/>
  <property name="nunit.path.net-1.1" value="C:\Program Files\NUnit 2.4.6 net-1.1\bin" overwrite="false"/>
  <property name="clean.path" value="${current.path}" overwrite="false"/>
  <property name="svn.path" value="C:\Program Files\Subversion\bin" overwrite="false"/>
  <property name="tortoisesvn.path" value="C:\Program Files\TortoiseSVN\bin" overwrite="false"/>
  <property name="yuicompressor.path" value="C:\Program Files\YUI Compressor\bin" overwrite="false"/>
  <property name="pngoptimise.exe" value="C:\Program Files\PngOptimizerCL\PngOptimizerCL.exe" overwrite="false"/>
  <property name="jscombiner.exe" value="C:\Program Files\RivetJsCombiner\Rivet.Console.exe" overwrite="false"/>
  <property name="jslint.exe" value="C:\Program Files\JsLint\jslint.bat" overwrite="false"/>

  <!-- Source directory from which a package is created -->
  <if test="${not property::exists('package.source.path')}">
    <property if="${property::exists('web.path')}" name="package.source.path" value="${web.path}" overwrite="false"/>
    <property if="${project.type == 'design'}" name="package.source.path" value="${design.source.path}" overwrite="false"/>
    <property if="${not property::exists('web.path')}" name="package.source.path" value="${working.path}/Web" overwrite="false"/>
  </if>
  
  <!-- NCover settings -->
    <property name="NCover.exe" value="C:\Program Files\NCover\ncover.console.exe" />
    <property name="testRunnerExe" value="C:\CruiseControl.NET\server\Tools\nUnit-2.5.5\nunit-console.exe" />
    <property name="testRunnerArgs" value=" " />
    
    <property name="coverage.dir" value="${build.dir}\coverage" />
    <property name="projectName" value="nCover Results" />
    <property name="log.dir" value="${build.dir}\logs" />
    <property name="appendTrendTo" value="${log.dir}\trends.xml" />
    <property name="workingDirectory" value="${log.dir}" />
    <property name="coverageFile" value="${log.dir}\coverage.xml" />
    <property name="excludeAssemblies" value="Castle.Core;Castle.DynamicProxy2;Lemon;log4net;Lucene.Net;Mvp.Xml;Sitecore.Kernel;StructureMap;Moq;FluentValidation;Sitecore.*; NHibernate.*;YAF.*;Lemon.*;AjaxControlToolkit.*;Intelligencia.*HtmlAgilityPack.*;ComponentArt.Web.UI.*;CookComputing.XmlRpcV2.*;Stimulsoft.*;" />
    <property name="symbolSearchLocations" value="Registry, SymbolServer, BuildPath, ExecutingDir" />
	<property name="solution.dir" value="${working.path}" />
	<assemblyfileset id="test.assemblies" basedir="${solution.dir}">
		<include name="\*\bin\Release\*Test.dll"></include>
		<include name="\*\bin\Release\*Tests.dll"></include>
		<include name="\*\*\bin\Release\*Test.dll"></include>
		<include name="\*\*\bin\Release\*Tests.dll"></include>	
		
		<exclude name="\*\bin\Release\*Selenium.Test.dll"></exclude>
		<exclude name="\*\bin\Release\*Selenium.Tests.dll"></exclude>
		<exclude name="\*\*\bin\Release\*Selenium.Test.dll"></exclude>
		<exclude name="\*\*\bin\Release\*Selenium.Tests.dll"></exclude>	
    </assemblyfileset>

  <!-- Set to true to copy all dlls from lib folder into the web bin folder -->
  <property name="copy-web-files-fn.copy.lib" value="true" overwrite="false"/>

  <property name="java.executable" value="C:\Program Files\Java\jre6\bin\java.exe" />
  
  <!-- Generic targets -->
  <target name="clean" description="remove all generated files">
  <echo message="start clean"></echo>
    <if test="${string::starts-with(project.type, 'java')}">
      <property name="ant.target" value="clean"/>
      <call target="ant" failonerror="false"/>
    </if>

    <delete failonerror="false">
      <fileset basedir="${clean.path}">
        <include name="**/*" />
        <exclude name="**/changes.xml" />
      </fileset>
    </delete>

    <mkdir dir="${clean.path}" failonerror="false" />

    <delete dir="${development.path}" failonerror="false" />
    <delete dir="${staging.path}" failonerror="false" />
    <delete dir="${live.path}" failonerror="false" />
  </target>

  <target name="compile" depends="clean">
      <echo message="start compile"></echo>
    <call if="${target::exists('pre-compile')}" target="pre-compile" />
      <call if="${project.type == 'net-4.0'}" target="msbuild"/>
   <call if="${project.type == 'net-3.5'}" target="msbuild"/> 
 <call if="${project.type == 'net-2.0'}" target="msbuild"/>
    <call if="${project.type == 'net-1.0' or project.type == 'net-1.1'}" target="solution-compile"/>    
    <call if="${target::exists('post-compile')}" target="post-compile" />
  <echo message="end compile"></echo>
  </target>

  <target name="analyse" depends="compile">
  <echo message="start analyse"></echo>
    <call if="${target::exists('pre-analyse')}" target="pre-analyse" />

    <call if="${string::starts-with(project.type, 'net') or project.type == 'cuyahoga'}" target="analyse-net"/>

    <call if="${target::exists('post-analyse')}" target="post-analyse" />
 <echo message="end analyse"></echo>
  </target>

  <target name="test" depends="compile">
   <if test="${not property::exists('testing.none')}" >
    <echo message="start test"></echo>
    <call if="${target::exists('pre-test')}" target="pre-test" />

    	
	 <call if="${string::starts-with(project.type, 'net') or project.type == 'cuyahoga'}" target="test-net"/>
  

    <call if="${target::exists('post-test')}" target="post-test" />
</if>
  </target>
  
  
  
  <target name="coverage" description="Generate code coverage using NCover">
  
     <if test="${not property::exists('testing.none')}" >
  <echo message="start coverage"></echo>
 <if test="${string::starts-with(project.type, 'net') or project.type == 'cuyahoga'}">
			<echo message="sln dir ${solution.dir}"></echo>
   <mkdir dir="${log.dir}" unless="${directory::exists(log.dir)}" />
      <foreach item="File" property="testdll">
  	<in>
  	<items refid="test.assemblies"></items>
      	</in>
       	<do>
		<property name="testRunnerArgs" value="${testRunnerArgs} &quot;${testdll}&quot;"></property>
		<property name="excludeAssemblies" value="${excludeAssemblies};${path::get-file-name(testdll)}"></property>
	</do>
    	</foreach>
    	<echo message="TestRunnerArgs: ${testRunnerArgs}"></echo>
    	<exec program="${NCover.exe}" commandline="&quot;${testRunnerExe}&quot; ${testRunnerArgs} //at &quot;${appendTrendTo}&quot; //x &quot;${coverageFile}&quot; //eas &quot;${excludeAssemblies}&quot; //ea &quot;IRS.Common.NCoverExclude;System.CodeDom.Compiler.GeneratedCodeAttribute;LDC.Core.Utils.ExcludeFromCoverage&quot; //p &quot;${projectName}&quot; //ssp &quot;${symbolSearchLocations}&quot; //w &quot;${workingDirectory}&quot;"  />
		  </if></if>
     </target>
  
    <target name="coverageReport" depends="test,coverage">
       <if test="${not property::exists('testing.none')}" >
	 <if test="${string::starts-with(project.type, 'net')}">
		  <loadtasks assembly="C:\CruiseControl.NET\server\Tools\NAnt\nantcintrib-0.85\NAnt.Contrib.Tasks.dll" failonerror="true" />
		  <msbuild project="${working.path}\NCoverReporting.msbuild" target="CreateCoverageReports">
			<property name="BuildDir" value="${working.path}\${build.dir}"></property>
			<property name="CoverageDir" value="${working.path}\${coverage.dir}"></property>
			<property name="ToolsDir" value=""></property>
			<property name="LogsDir" value="${log.dir}"></property>
		  </msbuild>
  </if>
  </if>
  
  </target>

  <!-- new official name -->
  <target name="build" depends="package" />
  
  <!-- legacy name for build -->
  <target name="package" depends="compile,analyse,coverage,coverageReport">
	<echo message="start of package"></echo>
    <call if="${target::exists('pre-build')}" target="pre-build" />
    
    <!-- legacy target -->
    <call if="${target::exists('pre-package')}" target="pre-package" />

    <if test="${string::starts-with(project.type, 'java')}">
      <property name="ant.target" value="build"/>
      <call target="ant" />
    </if>
	<echo message="before multi"></echo>
    <call if="${package.type == 'multi'}" target="package-multi"/>
    <call unless="${package.type == 'multi'}" target="package-single"/>

    <call if="${target::exists('post-build')}" target="post-build" />

    <!-- legacy target -->
    <call if="${target::exists('post-package')}" target="post-package" />
    <call target="test.selenium"/>

  </target>
  
  <target name="quick.package" depends="compile">
  
      <call if="${target::exists('pre-build')}" target="pre-build" />
      
      <!-- legacy target -->
      <call if="${target::exists('pre-package')}" target="pre-package" />
  
      <if test="${string::starts-with(project.type, 'java')}">
        <property name="ant.target" value="build"/>
        <call target="ant" />
      </if>
  
      <call if="${package.type == 'multi'}" target="package-multi"/>
      <call if="${package.type == 'custom'}" target="package-custom"/>
  
      <call if="${target::exists('post-build')}" target="post-build" />
  
      <!-- legacy target -->
      <call if="${target::exists('post-package')}" target="post-package" />
      
  </target>
  
  
  
  <!-- A lot of these targets depend upon the package name being the same as the core assembly name -->

  <!-- compile current project with MSBuild -->
  	<property name="tempSolutionName" value="${package.name}"/>
	
	
  <target name="msbuild">
    <if test="${property::exists('solutionName')}" >
  	<property name="tempSolutionName" value="${solutionName}"/>
    </if>

    <echo message="Compiling ${msbuild.workingdir}\${tempSolutionName}.sln"/>
    <exec program="msbuild.exe" basedir="${msbuild.path}" workingdir="${msbuild.workingdir}">
      <arg value="/p:Configuration=${msbuild.configuration}" />
      <arg value="/noconsolelogger" />
      <arg value="/v:normal" />
      <arg value="/logger:${lib.nant.path}/loggers/Rodemeyer.MsBuildToCCnet.dll"/>
      <arg value="/t:rebuild"/>
      <arg value="${tempSolutionName}.sln"/>
    </exec>
    <property name="msbuild.output.file" value="${msbuild.workingdir}/msbuild-output.xml"/>
    <move if="${file::exists(msbuild.output.file)}" file="${msbuild.output.file}" todir="${log.dir}" failonerror="false" overwrite="true" />
  </target>

  <target name="msbuild-verbose">
   <if test="${property::exists('solutionName')}" >
    	<property name="tempSolutionName" value="${solutionName}"/>
    </if>
    <echo message="Compiling ${msbuild.workingdir}\${package.name}.sln"/>
    <exec program="msbuild.exe" basedir="${msbuild.path}" workingdir="${msbuild.workingdir}">
      <arg value="/p:Configuration=${msbuild.configuration}" />
      <arg value="/v:normal" />
      <arg value="/t:rebuild"/>

      
      <arg value="${package.name}.sln"/>
    </exec>
  </target>

  <!-- Build .NET 1.0 and .NET 1.1 projects -->
  <target name="solution-compile" description="Compile .NET 1 code">
    <property name="solution.web.project.path" value="${working.path}/Web/${package.name}.Web.csproj" overwrite="false"/>
    <solution configuration="release" outputdir="${package.source.path}/bin" solutionfile="${package.name}.sln">
      <webmap>
        <map url="http://localhost/${web.virtualdirectory}/${package.name}.Web.csproj" path="${solution.web.project.path}" />
      </webmap>
      <assemblyfolders>
        <include name="${project.lib.path}"/>
      </assemblyfolders>
    </solution>
  </target>

  
 
  
  <!-- Perform default .NET testing -->
  <target name="test-net">
      <echo message="start testing"/>
  <echo message="start package source"/>
     <mkdir dir="${log.dir}" unless="${directory::exists(log.dir)}" />
    <if test="${property::exists('UnitTestAssemblys')}" > 
    <exec program="${testRunnerExe}">
            <arg value="${UnitTestAssemblys}" />
            <arg value="/xml=UnitTestAssembly-Results.xml" />
        </exec>
    
     </if>
     
         <if test="${not property::exists('UnitTestAssemblys')}" > 

         <nunit2 failonerror="true" verbose="true">
           <formatter type="Xml" usefile="${not(property::exists('CCNetNumericLabel'))}" extension=".xml" outputdir="${log.dir}"/>
           <test>
             <assemblies refid="test.assemblies"></assemblies>
           </test>
    	</nunit2>
    </if>

  </target>



<target name="deploy-to-dev">
  <echo message="start deploy"/>
	<if test="${property::exists('devserver.path')}" >
		<copy todir="${devserver.path}" overwrite="true" verbose="true">
		    <fileset basedir="${DeployEnvironment}">
			<include name="**"></include>
		  </fileset>
		</copy>
	</if>
</target>
  

  <!-- FxCop -->
  <target name="analyse-net">
    <property name="fxcop.file.name" value="${working.path}\${fxcop.config}"/>
    <mkdir dir="${log.path}" failonerror="false"/>
    <exec if="${file::exists(fxcop.file.name)}" program="fxcopcmd.exe" basedir="${fxcop.path}" failonerror="false" workingdir="${working.path}">
        <arg value="/p:${fxcop.file.name}"/>
      <arg value="/o:${log.path}\fxcop.xml" />
    </exec>
  </target>

  <target name="package-single" depends="copy-package-source-single,package-single-fn" />

  <target name="package-single-fn">

    <!-- Create versioning and distribution -->
    <if test="${property::exists('CCNetLabel')}">
      <call target="create-version-file" />
      <mkdir dir="${versions.path}" /> 
      <zip zipfile="${versions.path}\${package.name}-V${CCNetLabel}.zip">
        <fileset basedir="${current.path}">
          <include name="**/*" />
        </fileset>
      </zip>
    </if>

  </target>

  <!-- Changes build-type specific files -->
  <target name="change-config-files">

    <!-- Development -->
    <property name="remove-file-extensions-fn.extension" value="${development.label}"/>
    <property name="remove-file-extensions-fn.path" value="${development.path}"/>
    <call target="remove-file-extensions-fn" />

    <!-- Staging -->
    <property name="remove-file-extensions-fn.extension" value="${staging.label}"/>
    <property name="remove-file-extensions-fn.path" value="${staging.path}"/>
    <call target="remove-file-extensions-fn" />
    
    <!-- Live -->
    <property name="remove-file-extensions-fn.extension" value="${live.label}"/>
    <property name="remove-file-extensions-fn.path" value="${live.path}"/>
    <call target="remove-file-extensions-fn" />

    <property name="delete-config-file-variations.path" value="${current.path}"/>
    <call target="delete-config-file-variations"/>

  </target>

  <target name="delete-config-file-variations">
    <!-- Clear out other config files -->
    <delete failonerror="false">
      <fileset basedir="${delete-config-file-variations.path}">
        <include name="**/*.${live.label}"/>
        <include name="**/*.${staging.label}"/>
        <include name="**/*.${development.label}"/>
        <include name="**/*.release"/>
      </fileset>
    </delete>
  </target>

  <!-- creates development, staging and live variations -->
  <target name="package-multi" depends="copy-package-source-multi,change-config-files,package-versions" />

  <!-- Copies files from the web directory to the relevant distributions -->  
  <target name="copy-package-source-multi" depends="create-version-file">
  <echo message="start package source"/>
    <!-- development -->
    <property name="copy-package-source-fn.destination.path" value="${development.path}"/>
    <call target="copy-package-source-fn"/>
    
    <property name="create-version-file.build.type" value="${development.label}"/>
    <property name="create-version-file.destination.path" value="${development.path}"/>
    <call target="create-version-file" />

<if test="${not property::exists('SkipPackaging')}">
    <!-- staging -->
    <property name="copy-package-source-fn.destination.path" value="${staging.path}"/>
    <call target="copy-package-source-fn"/>

    <property name="create-version-file.build.type" value="${staging.label}"/>
    <property name="create-version-file.destination.path" value="${staging.path}"/>
    <call target="create-version-file" />
   
    
    <!-- live -->
    <property name="copy-package-source-fn.destination.path" value="${live.path}"/>
    <call target="copy-package-source-fn"/>

    <property name="create-version-file.build.type" value="${live.label}"/>
    <property name="create-version-file.destination.path" value="${live.path}"/>
    <call target="create-version-file" />
 </if>
  </target>
  
   <target name="package-versions">
  <call target="deploy-to-dev"/>
   <if test="${not property::exists('SkipPackaging')}">
	   <if test="${property::exists('CCNetLabel')}">
	      <mkdir dir="${versions.path}" />
	      <zip zipfile="${versions.path}\${package.name}-${development.label}-V${CCNetLabel}.zip">
		<fileset basedir="${development.path}">
		  <include name="**/*" />
		</fileset>
	      </zip>
	      
	      <zip zipfile="${versions.path}\${package.name}-${staging.label}-V${CCNetLabel}.zip">
		<fileset basedir="${staging.path}">
		  <include name="**/*" />
		</fileset>
	      </zip>
	      <zip zipfile="${versions.path}\${package.name}-${live.label}-V${CCNetLabel}.zip">
		<fileset basedir="${live.path}">
		  <include name="**/*" />
		</fileset>
	      </zip>
	    </if>
    </if>
  </target>
  
 <target name="package-custom">
    
     <foreach item="String" in="${package.versions}" delim="," property="ws">
     
        <echo message="${ws}" />
        <property name="folder.path" value="${current.path}/${ws}" overwrite="false"/>
       
        <property name="copy-package-source-fn.destination.path" value="${folder.path}"/>
        <call target="copy-package-source-fn"/>
        
       
        
        <property name="copy-web-files-fn.source.path" value="${folder.path}"/>
        <property name="copy-web-files-fn.destination.path" value="${copy-package-source-fn.destination.path}"/>
        <call target="copy-web-files-fn"/>
      
        <property name="create-version-file.build.type" value="${ws}"/>
        <property name="create-version-file.destination.path" value="${folder.path}"/>
        <call target="create-version-file" />
  
    <echo message="looping through: ${working.path}\${package.versions.config.folder}\*.${ws}" />
     
        <foreach item="File" property="filename">
              <in>
                <items>
                   <include name="${working.path}\${package.versions.config.folder}\*.${ws}" />
                   <include name="${working.path}\${package.versions.config.folder}\*\*.${ws}" />
				   <include name="${working.path}\${package.versions.config.folder}\*\*\*.${ws}" />
                </items>
              </in>
              <do>
               	 <echo message="file was: ${filename}" />
  				 
  		 <property name="remove-file-extensions-fn.destination.filename" value="${string::substring(filename, 0, string::get-length(filename) - string::get-length(ws) - 1)}" />
  		 <echo message="dest file was: ${remove-file-extensions-fn.destination.filename}" />
  		 
  		 <property name="ccbase" value="c:\CruiseControl.NET\Projects\"/>
  		 <property name="configbase" value="\DeploymentScripts\Serverproperties\LiveConfigs\"/>

  		 <property  name="lengthOfBaseFolder" value="${string::get-length(ccbase + package.name + configbase)}" />
  		 <echo message="lengthOfBaseFolder was: ${lengthOfBaseFolder}" />
  		 
  		 <property name="endlength" value="${string::get-length(filename) - string::get-length(ws) - 1}" />
  		 <echo message="endlength was: ${endlength}" />

  		 <property  name="subFolderName" value="${string::substring(remove-file-extensions-fn.destination.filename, lengthOfBaseFolder, convert::to-int(endlength) - convert::to-int(lengthOfBaseFolder))}" />
  		 <echo message="subfolder was: ${subFolderName}" />
  		  
  		 <delete file="${folder.path}\${subFolderName}.development" />
  		 <delete file="${folder.path}\${subFolderName}.staging" />

		 <move overwrite="true" file="${filename}" tofile="${folder.path}\${subFolderName}" />
		 <echo message="New File: ${folder.path}\${subFolderName}"/>
		 
              </do>
         </foreach>
  
        <property name="remove-file-extensions-fn.extension" value="${ws}"/>
        <property name="remove-file-extensions-fn.path" value="${folder.path}"/>
        <call target="remove-file-extensions-fn" />
        
       
     	  
        <mkdir dir="${versions.path}" />
        <zip zipfile="${versions.path}\${package.name}-${ws}-V${CCNetLabel}.zip">
  	<fileset basedir="${folder.path}">
  	  <include name="**/*" />
  	</fileset>
        </zip>
  
       </foreach>	
      
  </target>


  <target name="create-version-file">
    <if test="${property::exists('CCNetLabel')}">
      
      <!--<copy todir="${create-version-file.destination.path}" overwrite="true">
        <fileset basedir="${lib.template.path}">
          <include name="version.html" />
        </fileset>
        <filterchain>
          <replacetokens>
            <token key="BUILD_DATE" value="${CCNetBuildDate}" />
          </replacetokens>
          <replacetokens>
            <token key="BUILD_TIME" value="${CCNetBuildTime}" />
          </replacetokens>
          <replacetokens>
            <token key="BUILD_NUMBER" value="${CCNetLabel}" />
          </replacetokens>
          <replacetokens>
            <token key="BUILD_TYPE" value="${create-version-file.build.type}" />
          </replacetokens>
          <replacetokens>
            <token key="TITLE" value="${CCNetProject}" />
          </replacetokens>
        </filterchain>
      </copy> -->
    </if>
  </target>

  <target name="copy-package-source-single">
	  <property name="copy-package-source-fn.destination.path" value="${current.path}"/>
	  <call target="copy-package-source-fn"/>
  </target>
  
  <target name="copy-package-source-fn">
    <property name="copy-web-files-fn.source.path" value="${package.source.path}"/>
    <property name="copy-web-files-fn.destination.path" value="${copy-package-source-fn.destination.path}"/>
    <call target="copy-web-files-fn"/>

    <!-- Option to change source contents before any packaging is done -->
    <property name="post-source-copy.destination.path" value="${copy-package-source-fn.destination.path}"/>
    <call if="${target::exists('post-source-copy')}" target="post-source-copy"/>
    
    <!-- Might want to pack all javascript/css in this project -->
	<call if="${property::exists('run-js-validate') and property::get-value('run-js-validate') == 'true'}" target="JS.validate"/>
	<call if="${property::exists('run-css-combine') and property::get-value('run-css-combine') == 'true'}" target="CSS.combine"/>
    <call if="${property::exists('run-frontend-combine') and property::get-value('run-frontend-combine') == 'true'}" target="combine.assets"/>
    <call if="${property::exists('run-frontend-compress') and property::get-value('run-frontend-compress') == 'true'}" target="compress.assets"/>

    

  </target>
  
 


  <target name="copy-web-files-fn" overwrite="true">
  <echo message="Running standard copy-web"/>
    <property name="copy-web-files-fn.overwrite" unless="${property::exists('copy-web-files-fn.overwrite')}" value="false"/>
    <copy todir="${copy-web-files-fn.destination.path}" includeemptydirs="false" overwrite="${copy-web-files-fn.overwrite}">
      <fileset basedir="${copy-web-files-fn.source.path}">
        <include name="**/*"/>
        <include name="App_Code/*.cs"/>
        <exclude unless="${msbuild.configuration == 'Debug'}" name="**/*.pdb"/>
        <exclude name="**/*.cs"/>
        <exclude name="**/*.csproj"/>
        <exclude name="**/*.csproj.webinfo"/>
        <exclude name="**/*.scc"/>
        <exclude name="**/*.vspscc"/>
        <exclude name="obj/**"/>
        <exclude name="web.config"/>
        <exclude name="log4net.config"/>
        <exclude name="build.ver"/>
        <exclude name="**/_svn"/>
        <exclude name="**/.svn"/>
        <exclude name="**/CVS"/>
        <exclude name="**/*.log"/>
        <exclude name="**/*~"/>
        <exclude name="**/*.exclude"/>
        <exclude name="**/*.user"/>
        <exclude name="Properties"/>
        <exclude name="Thumbs.db"/>
        <exclude name="**/*.as?x.resx"/>
        <exclude name="**/SQLUpdates/*" />
	      <exclude name="**/_sql_updates/*" />
	      <exclude name="**/*.build" />
	      <exclude name="**/dwsync.xml" />
      </fileset>
    </copy>
    <copy todir="${copy-web-files-fn.destination.path}">
      <fileset basedir="${copy-web-files-fn.source.path}">
        <include name="**/App_Code/**"/>
        <include name="**/yaf/**"/>
        <include name="**/App_Code/*.vb"/>
      </fileset>
    </copy>
    <copy if="${copy-web-files-fn.copy.lib}" todir="${copy-web-files-fn.destination.path}/bin">
      <fileset basedir="${project.lib.path}">
        <include name="*.dll"/>
        <include name="*/*.dll"/>
        <include name="*/*/*.dll"/>
        <include name="**/*.lic"/>
      </fileset>
    </copy>
    
    
  </target>



  <!-- rename all files ending in -->
  <target name="remove-file-extensions-fn">
  <echo message="Original File ${remove-file-extensions-fn.path}\**\*.${remove-file-extensions-fn.extension}"/>
    <foreach item="File" property="filename">
      <in>
        <items>
          <include name="${remove-file-extensions-fn.path}\**\*.${remove-file-extensions-fn.extension}" />
        </items>
      </in>
      <do>
        <property name="remove-file-extensions-fn.destination.filename" value="${string::substring(filename, 0, string::get-length(filename) - string::get-length(remove-file-extensions-fn.extension) - 1)}" />
        <move overwrite="true" file="${filename}" tofile="${remove-file-extensions-fn.destination.filename}" />
		<echo message="New File: ${remove-file-extensions-fn.destination.filename}"/>
      </do>
    </foreach>
  </target>
  
  <!-- SVN Export -->
  <target name="svn-export">
    <property name="svn-export.destination.path" value="${working.path}" overwrite="false"/>
    <mkdir dir="${svn-export.destination.path}" failonerror="false"/>
    <exec program="svn" basedir="${svn.path}" workingdir="${svn-export.destination.path}">
      <arg value="export" />
      <arg value="${svn-export.repository.path}" />
      <arg value="." />
      <arg value="--force" />
    </exec>
  </target>

  <!-- SVN Checkout -->
  <target name="svn-checkout">
    <property name="svn-checkout.destination.path" value="${working.path}" overwrite="false"/>
    <mkdir dir="${svn-checkout.destination.path}" failonerror="false"/>
    <exec program="TortoiseProc.exe" basedir="${tortoisesvn.path}" workingdir="${svn-checkout.destination.path}">
      <arg value="/command:checkout" />
      <arg value="/path:${svn-checkout.destination.path}" />
      <arg value="/url:${svn-checkout.repository.path}" />
    </exec>
  </target>

  <!-- SVN Update -->
  <target name="svn-update">
    <property name="svn-update.destination.path" value="${working.path}" overwrite="false"/>
    <exec program="TortoiseProc.exe" basedir="${tortoisesvn.path}" workingdir="${svn-update.destination.path}">
      <arg value="/command:update" />
      <arg value="/path:${svn-update.repository.path}" />
    </exec>    
  </target>

  
  <!-- Front-End Processors -->
<target name="CSS.combine">
	<echo message="Starting CSS Combine"/>
	<loadtasks path="C:\CruiseControl.NET\server\Tools\NAnt\tasks" failonerror="false" />
	<CssCombiner>
	  <fileset basedir="${post-source-copy.destination.path}">
		<include name="*.css" />
	  </fileset>
	</CssCombiner>
	<echo message="Ending CSS Combine"/>
</target>
<target name="Css.minify">
	<echo message="Starting CSS minify"/>
	<echo message="dest path:  ${post-source-copy.destination.path}"/>
	<foreach item="File" property="filename">
	  <in>
		<items basedir="${post-source-copy.destination.path}">
		  <include name="**/*.css" />
		</items>
	  </in>
	  <do>
		<echo message="Processing ${filename}"/>
		<exec program="${java.executable}" workingdir="C:\CruiseControl.NET\server\Tools\NAnt\">
		  <arg value="-jar" />
		  <arg value="yuicompressor.jar" />
		  <arg value="-o" />
		  <arg value="${filename}.min" />
		  <arg value="${filename}" />
		</exec>
		<move file="${filename}.min" tofile="${filename}" overwrite="true" />
	  </do>
	</foreach>
	<echo message="Ending CSS minify"/>
</target>
<target name="JS.combine">
	<echo message="Starting JS Combine"/>
	<echo message="${post-source-copy.destination.path}\js\"/>
	<exec program="${jscombiner.exe}" commandline="js\" workingdir="${post-source-copy.destination.path}" />
	<echo message="${post-source-copy.destination.path}\lib\"/>
	<property name="post-source-copy.lib.path" value="${post-source-copy.destination.path}\lib\" />
	<exec 	if="${directory::exists(post-source-copy.lib.path)}" 
			program="${jscombiner.exe}" 
			commandline="lib\" 
			workingdir="${post-source-copy.destination.path}" />
</target>
<target name="JS.minify">
	<echo message="Starting js minify"/>
	<foreach item="File" property="filename">
	  <in>
		<items basedir="${post-source-copy.destination.path}\js\">
		  <exclude name="**/*.vsdoc.js" />
		  <exclude name="**/*.min*js"/>
		  <include name="**/*.js" />
		</items>
	  </in>
	  <do>
		<echo message="Processing JS FILE ${filename}"/>
		<exec program="${java.executable}" workingdir="C:\CruiseControl.NET\server\Tools\NAnt\">
		  <arg value="-jar" />
		  <arg value="yuicompressor.jar" />
		  <arg value="--charset" />
		  <arg value="utf-8" />
		  <arg value="-o" />
		  <arg value="${filename}.min" />
		  <arg value="${filename}" />
		</exec>
		<move file="${filename}.min" tofile="${filename}" overwrite="true" />
	  </do>
	</foreach>
</target>
<target name="PNG.compress">
	<echo message="Starting PNG compress"/>
	<echo message="${post-source-copy.destination.path}/images/"/>
	<foreach item="File" property="pngfile">
	  <in>
		<items>
		  <include name="${post-source-copy.destination.path}/images/**/*.png" />
		</items>
	  </in>
	  <do>
		<echo message="${pngfile}" />
		<exec program="${pngoptimise.exe}" commandline="-file:${pngfile}" />
	  </do>
	</foreach>
</target>
<target name="JS.validate">
	<echo message="jsLint Tests" />
	<foreach item="File" property="jsfile">
	  <in>
		<items>
		  <include name="${post-source-copy.destination.path}/js/**/*.js" />
		</items>
	  </in>
	  <do>
		<exec program="${jslint.exe}" commandline="${jsfile}" />
	  </do>
	</foreach>
</target>
  
  
 <target name="compress.assets" depends="Css.minify, JS.minify"/>
 <target name="combine.assets" depends="CSS.combine, JS.combine"/>


<target name="test.selenium">
 	<mkdir dir="${log.dir}" />
 	<if test="${property::exists('SeleniumTestDllPath')}">
		
		<exec program="${testRunnerExe}">
		            <arg value="${SeleniumTestDllPath}" />
		            <arg value="/xml=${log.dir}\UnitTestAssembly-Results.xml" />
		        
        </exec>
	</if>
</target>
  
</project>